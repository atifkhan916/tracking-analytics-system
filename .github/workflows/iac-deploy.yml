name: Tracking-Analytics-Deployment

on:
  pull_request:
    types: [closed]
    branches: [dev]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev/prod)'
        required: true
        default: 'dev'

env:
  TF_DIR: './terraform'
  APP_DIR: './app'
  AWS_REGION: 'us-west-2'

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ env.APP_DIR }}/requirements.txt pytest

    - name: Run Tests
      run: |
        cd ${{ env.APP_DIR }}
        # pytest
    
    - name: Read Environment Variables
      id: tfvars
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.base_ref }}" == "dev" ]]; then
          ENV="dev"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENV="${{ github.event.inputs.environment }}"
        else
          echo "No deployment will be performed."
          exit 1
        fi
        
        echo "DEPLOY_ENV=${ENV^^}" >> $GITHUB_ENV
        
        # Read aws_region from tfvars
        AWS_REGION=$(grep 'aws_region' "$TF_DIR/environments/${ENV}.tfvars" | cut -d'=' -f2 | tr -d ' "')
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
        
        echo "Environment variables set:"
        echo "DEPLOY_ENV: ${ENV^^}"
        echo "AWS_REGION: $AWS_REGION"

    - name: Configure AWS credentials
      if: env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets[format('TRACKING_{0}_AWS_ACCESS_KEY_ID', env.DEPLOY_ENV)] }}
        aws-secret-access-key: ${{ secrets[format('TRACKING_{0}_AWS_SECRET_KEY', env.DEPLOY_ENV)] }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD'
      uses: aws-actions/amazon-ecr-login@v2
      id: login-ecr

    - name: Build and push Docker image
      if: env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD'
      run: |
        ENV_LOWER=$(echo "${{ env.DEPLOY_ENV }}" | tr '[:upper:]' '[:lower:]')
        ECR_REPOSITORY="tracking-app-${ENV_LOWER}-repo"
        IMAGE_TAG=${{ github.sha }}

        # Check if repository exists, create if it doesn't
        if ! aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" 2>/dev/null; then
          echo "Creating ECR repository: ${ECR_REPOSITORY}"
          aws ecr create-repository \
            --repository-name "${ECR_REPOSITORY}" \
            --image-tag-mutability MUTABLE \
            --image-scanning-configuration scanOnPush=true
        fi
        echo "ECR repository exists: ${ECR_REPOSITORY}"
        
        docker build -t ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG ${{ env.APP_DIR }}
        docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
        
        echo "IMAGE=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Setup Terraform
      if: env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD'
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.7'

    - name: Deploy Infrastructure
      if: env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD'
      env:
        TF_VAR_environment: ${{ env.DEPLOY_ENV }}
      run: |
        if [[ "${{ env.DEPLOY_ENV }}" == "PROD" ]]; then
          echo "Production deployment requires approval"
          read -p "Type 'yes' to continue: " confirmation
          if [ "$confirmation" != "yes" ]; then
            echo "Production deployment cancelled."
            exit 1
          fi
        fi
        
        cd "$TF_DIR"
        ENV_LOWER=$(echo "${{ env.DEPLOY_ENV }}" | tr '[:upper:]' '[:lower:]')
        BUCKET_NAME="${ENV_LOWER}-tracking-app-terraform-state"
        VAR_FILE="environments/${ENV_LOWER}.tfvars"
        WORKSPACE_NAME="${ENV_LOWER}"

        echo "Initializing Terraform..."
        terraform init \
          -backend-config="bucket=${BUCKET_NAME}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

        terraform workspace select -or-create ${WORKSPACE_NAME}

        terraform validate

        terraform plan \
          -var-file="${VAR_FILE}" \
          -var="project=tracking-app" \
          -var="environment=${ENV_LOWER}" \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="db_name=${{ secrets[format('DB_NAME_{0}', env.DEPLOY_ENV)] }}" \
          -var="db_user=${{ secrets[format('DB_USER_{0}', env.DEPLOY_ENV)] }}" \
          -var="db_password=${{ secrets[format('DB_PASSWORD_{0}', env.DEPLOY_ENV)] }}" \
          -out=tfplan

        terraform apply -auto-approve tfplan

        # Capture outputs
        DB_HOST=$(terraform output -raw db_host)
        echo "DB_HOST=${DB_HOST}" >> $GITHUB_ENV

    - name: Update ECS Service
      if: env.DEPLOY_ENV == 'DEV' || env.DEPLOY_ENV == 'PROD'
      run: |
        ENV_LOWER=$(echo "${{ env.DEPLOY_ENV }}" | tr '[:upper:]' '[:lower:]')
        CLUSTER_NAME="tracking-app-${ENV_LOWER}-cluster"
        SERVICE_NAME="tracking-app-${ENV_LOWER}-app"
        
        aws ecs update-service \
          --cluster ${CLUSTER_NAME} \
          --service ${SERVICE_NAME} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
        
        aws ecs wait services-stable \
          --cluster ${CLUSTER_NAME} \
          --services ${SERVICE_NAME} \
          --region ${{ env.AWS_REGION }}